z <- 9
z[1]
length(9)
xx <- sumx(9,1)
xx
cat_nine <- function(start, end){
# for문 시작단부터 종료단까지 반복
for (n in c(start:end)) {
# 1단부터 9단까지 반복
for (num in (1:9)) {
cat(n, 'X', num,'=',n*num)
}
}
}
cat_nine(3,8)
cat_nine <- function(start, end){
# for문 시작단부터 종료단까지 반복
for (n in c(start:end)) {
# 1단부터 9단까지 반복
for (num in (1:9)) {
cat(n, 'X', num,'=',n*num,'\n')
}
}
}
cat_nine(3,8)
cat_nine <- function(start, end){
# for문 시작단부터 종료단까지 반복
for (n in c(start:end)) {
cat('[',n,'단]\n')
# 1단부터 9단까지 반복
for (num in (1:9)) {
cat(n, 'X', num,'=',n*num,'\n')
}
}
}
cat_nine(3,8)
cat_nine <- function(start, end){
# for문 시작단부터 종료단까지 반복
for (n in c(start:end)) {
cat('[',n,'단]\n',sep='')
# 1단부터 9단까지 반복
for (num in (1:9)) {
cat(n, 'X', num,'=',n*num,'\n')
}
}
}
cat_nine(3,8)
cat_nine <- function(start, end){
# for문 시작단부터 종료단까지 반복
for (n in c(start:end)) {
cat('\n[',n,'단]\n',sep='')
# 1단부터 9단까지 반복
for (num in (1:9)) {
cat(n, 'X', num,'=',n*num,'\n')
}
}
}
cat_nine(3,8)
# 패키지 설치
install.packages('stringr')
# 패키지 제거
remove.packages('stringr')
# 패키지 설치
install.packages('stringr')
# 사용 : 메모리로 로딩
library(stringr)
# 문자열의 길이
s1 <- "Hello, World."
length(s1)
# 문자열에서 논리적인 문자로 구성된 길이
sl <- str_length(s1)
sl
# 한글, 숫자
sh <- "한글12345"
str_length(sh)
# 한글, 숫자, 공백, 특수문자
sh <- "한글12345\n"
str_length(sh) # 7 : 한글(2)+숫자(5)
# 문자열 내에서 특정 문자열의 위치
sp1 <- "영일이삼사오육칠팔구십"
sl10 <- str_locate(sp1, "육")
sl10
l38 <- str_locate(sp1, "삼사오육칠팔")
l38
#      start end
# [1,]     4   9
class(138)
#      start end
# [1,]     4   9
class(l38)
l38[1,1]
l38[1,2]
# 부분 문자열 만들기
# help(str_sub)
# str_sub(string, start = 1L, end = -1L)
s38 <- str_sub(sp1, l3[1,1], 18[1,2])
l3 <- str_locate(sp1,"삼")
l8 <- str_locate(sp1,"팔")
# 부분 문자열 만들기
# help(str_sub)
# str_sub(string, start = 1L, end = -1L)
s38 <- str_sub(sp1, l3[1,1], 18[1,2])
# 부분 문자열 만들기
# help(str_sub)
# str_sub(string, start = 1L, end = -1L)
s38 <- str_sub(sp1, l3[1,1], 18[1,2])
# 부분 문자열 만들기
# help(str_sub)
# str_sub(string, start = 1L, end = -1L)
s38 <- str_sub(sp1, l3[1,1], l8[1,2])
s38
# [문제]
# 이메일: abc@ysit.ac.kr
# 위 이메일 주소에서 아이디와 주소를 분리 추출하라.
em <- "abc@ysit.ac.kr"
id <- str_sub(em,str_locate("abc"))
id <- str_sub(em,str_locate("abc")[1],str_locate("abc")[2])
id_loc <- str_locate(em,"@")
id_loc
at_loc <- str_locate(em,"@")
at_loc
id <- str_sub(em,1,at_loc)
id
id <- str_sub(em,1,at_loc-1)
id
addr <- str_sub(em,at_loc+1,str_length(em))
addr
addr
addr <- str_sub(em,at_loc+1,str_length(em))
addr
str_length(em)
id # abc
id # abc
at_loc
at_loc-1
id <- str_sub(em,1,at_loc-1[1,2])
id <- str_sub(em,1,at_loc-1[1,1])
at_loc-1
id <- str_sub(em,1,at_loc-1[1,1])
at_loc-1[2]
at_loc[2]
at_loc[2]-1
at_loc[1,2]-1
id <- str_sub(em,1,at_loc[1,2]-1)
id # abc
addr <- str_sub(em,at_loc+1,str_length(em))
addr
addr <- str_sub(em,at_loc[1,2]+1,str_length(em))
addr
at_loc[1,2]
mode(l38)
# 대소문자 변환
EMAIL <- str_to_upper(em)
EMAIL
# 소문자로 변환
email <- str_to_lower(EMAIL)
email
# 문자열 교체
sid <- "980120-1234567"
str_replace(sid, '-','.')
sid
xid <- str_replace(sid, '-','.')
xid
# 전화번호
tel <- "010-1234-5678"
str_replace(tel, '-', '.')
# 전체 문자열 교체
str_replace_all(tel, '-', '.')
# 문자열 결합
# str_c(..., sep = "", collapse = NULL)
t1 <- '010'
t2 <- '1234'
t3 <- '5678'
tel <- str_c(t1,'-',t2,'-',t3)
tel
# 문자열 분할
telx <- str_split(tel, '-')
telx
class(telx)
telx[1]
telx[2]
telx[,1]
telx[1][1]
telx[1][2]
telx[[1]][1]
# 참조
lt[[1]]
nx <- seq(1,10,2)
ax <- c('a','b','c')
# 생성
lt <- list(nx, ax)
lt
# 참조
lt[[1]]
lt[[2]]
# 분할 함수 str_split()의 결과 list형을 벡터 변환
telv <- unlist(telx)
telv
class(telv)
telv[1]
# 벡터를 문자열로 결합
telp <- paste(telv, collapse = '.')
telp
tel_s <- str_split(tel,'-')
tel_s
new_tel <- str_c(tel_s,'.')
tel_s <- unlist(tel_s)
new_tel <- str_c(tel_s,'.')
new_tel
new_tel <- str_c(tel_s[1],'.',tel_s[2],'.',tel_s[3])
new_tel
new_idn <- str_c(str_split(tel,'-'),'.')
new_idn <- str_c(unlist(str_split(tel,'-')),'.')
new_idn
new_idn <- str_c(unlist(str_split(idn,'-')),'.')
idn <- "123456-1234567"
new_idn <- str_c(unlist(str_split(idn,'-')),'.')
new_idn
idn_s <- str_split(idn,'-')
idn_s <- unlist(str_split(idn,'-'))
new_idn <- str_c(idn_s[1],'.',idn_s[2])
new_idn
info <- "010-1234-5678","123456-1234567"
info <- ("010-1234-5678","123456-1234567")
info <- c("010-1234-5678","123456-1234567")
new_info <- str_c(str_split(info,'-'),'.')
new_info
new_info <- str_c(str_split(info,'-'),collapse = '.')
new_info
# 예시 문자열
strings <- c("010-1234-5678", "123456-1234567")
# '.'로 결합
new_strings <- str_c(str_split(strings, "-"), collapse = ".")
print(new_strings)
#[문제]
# 문자열: "010-1234-5678", "123456-1234567"
# 위 문자열 예시처럼 데이터가 '-'로 연결되어 있다.
# paste() 함수 없이
# str_c() 함수를 사용하여 임의로 새로운 연결문자(.)로 결합하라.
tel <- "010-1234-5678"
tel_s <- str_split(tel,'-')
tel_s <- unlist(tel_s)
for (n in tel_s) {
new_tel <- str_c(n,'.')
}
# new_tel <- str_c(tel_s[1],'.',tel_s[2],'.',tel_s[3])
new_tel
for (n in tel_s) {
new_tel <- str_c(new_tel,'.',n)
}
# new_tel <- str_c(tel_s[1],'.',tel_s[2],'.',tel_s[3])
new_tel
#[문제]
# 문자열: "010-1234-5678", "123456-1234567"
# 위 문자열 예시처럼 데이터가 '-'로 연결되어 있다.
# paste() 함수 없이
# str_c() 함수를 사용하여 임의로 새로운 연결문자(.)로 결합하라.
tel <- "010-1234-5678"
tel_s <- str_split(tel,'-')
tel_s <- unlist(tel_s)
for (n in tel_s) {
new_tel <- str_c(new_tel,'.',n)
}
# new_tel <- str_c(tel_s[1],'.',tel_s[2],'.',tel_s[3])
new_tel
new_tel <- ''
for (n in tel_s) {
new_tel <- str_c(new_tel,'.',n)
}
# new_tel <- str_c(tel_s[1],'.',tel_s[2],'.',tel_s[3])
new_tel
new_tel <- ''
for (n in tel_s) {
if(new_tel==''){
new_tel <- tel_s[1]
next
}
new_tel <- str_c(new_tel,'.',n)
}
# new_tel <- str_c(tel_s[1],'.',tel_s[2],'.',tel_s[3])
new_tel
new_tel <- ''
for (n in tel_s) {
if(new_tel==''){
new_tel <- n
next
}
new_tel <- str_c(new_tel,'.',n)
}
# new_tel <- str_c(tel_s[1],'.',tel_s[2],'.',tel_s[3])
new_tel
data <- "010-1234-5678"
# 문자열 -> 문자벡터
vdata <- unlist(strsplit(data,''))
vdata
ldata <- length(vdata)
ldata
for (n in 1:ldata) {
if(vdata[n] == '-')
vdata[n] = '.'
}
vdata
vdata <- str_c(vdata)
vdata
vdata <- list(vdata)
vdata
vdata <- str_c(vdata[1:ldata])
# 문자열 -> 문자벡터
vdata <- unlist(strsplit(data,''))
for (n in 1:ldata) {
if(vdata[n] == '-')
vdata[n] = '.'
}
vdata <- str_c(vdata[1:ldata])
vdata
for (n in 1:ldata) {
if(vdata[n] == '-')
vdata[n] = '.'
vdata <- str_c(vdata,vdata[n])
}
vdata
# 문자열 -> 문자벡터
vdata <- unlist(strsplit(data,''))
for (n in 1:ldata) {
if(vdata[n] == '-')
vdata[n] = '.'
new_data <- str_c(new_data,vdata[n])
}
new_data <- ''
for (n in 1:ldata) {
if(vdata[n] == '-')
vdata[n] = '.'
new_data <- str_c(new_data,vdata[n])
}
new_data
# 영문 소문자가 3글자 연속해서 나오는 경우 추출
help(str_extract)
# str_extract(string, pattern, group = NULL)
str_extract(sr, "[a-z]{3}") # "abc
sr <- "012abcdef1234567ABCDEFGend"
# str_extract(string, pattern, group = NULL)
str_extract(sr, "[a-z]{3}") # "abc
sr <- "012abddef1234567ABCDEFGend"
# str_extract(string, pattern, group = NULL)
str_extract(sr, "[a-z]{3}") # "abc
sr <- "012abcdef1234567ABCDEFGend"
# str_extract(string, pattern, group = NULL)
str_extract(sr, "[a-z]{5}") # "abc
# str_extract(string, pattern, group = NULL)
str_extract(sr, "[a-z]{7}") # "abc
str_extract(sr, "[0-9]{5}") # "abc
# 대문자 3번 연속
str_extract(sr, "[A-Z]{3}") # "abc"
# 패턴에 매칭되는 모든 문자열을 추출
str_extract_all(sr, "[a-z]{3}")
# 패턴에 매칭되는 모든 문자열을 리스트로 추출
class(str_extract_all(sr, "[a-z]{3}")) # "abc" "def" "end"
#
s2 <- "start,hello world.Welcome to Korea,END."
str_extract_all(s2, "[a-z]{3,}")
str_extract_all(s2, "[A-Za-z]{3,}") # "start"  "hello"  "world"  "elcome" "orea"
s1 <- "NAME(홍길동), TEL(010-1234-3578), EMAIL(abc@ysit.ac.kr)"
name <- str_extract(s1,[가-힣]{2,4})
name <- str_extract(s1,[가-힝]{2,4})
name <- str_extract(s1,"[가-힣]{2,4}")
name
tel <- str_extract(s1,"[0-9]-[0-9]-[0-9]")
tel
tel <- str_extract_all(s1,"[0-9]-[0-9]-[0-9]")
tel
tel <- str_extract_all(s1,"[0-9]-[0-9]-[0-9]{0,}")
tel
tel <- str_extract_all(s1,"[0-9]{3}-[0-9]{4}-[0-9]{4}")
tel
tel <- str_extract(s1,"[0-9]{3}-[0-9]{4}-[0-9]{4}")
tel
email <- str_extract(s1,"[a-zA-Z]{1,}@[a-z.]{1,}")
email
email <- str_extract(s1,"[a-zA-Z0-9]{1,}@[a-z.]{1,}")
email # "abc@ysit.ac.kr"
email <- str_extract(s1,"[a-zA-Z0-9]{1,}@[a-z.]{1,}")
email # "abc@ysit.ac.kr"
s1 <- "NAME(홍길동), TEL(010-1234-3578), EMAIL(Abc88@ysit.ac.kr)"
email <- str_extract(s1,"[a-zA-Z0-9]{1,}@[a-z.]{1,}")
email # "abc@ysit.ac.kr"
class(tel)
# [문제1]
# 문자열에서 정규표현식을 사용하여 전화번호를 추출하라
# 국번은 2,3자리, 중간번호는 3,4자리, 끝번호는 4자리
# 예시: "02-123-1234", "02-1234-1234", "031-1234-5678"
tel <- "02-123-1234"
class(tel)
mode(tel)
# [문제1]
# 문자열에서 정규표현식을 사용하여 전화번호를 추출하라
# 국번은 2,3자리, 중간번호는 3,4자리, 끝번호는 4자리
# 예시: "02-123-1234", "02-1234-1234", "031-1234-5678"
tel <- c("02-123-1234", "02-1234-1234", "031-1234-5678")
class(tel)
mode(tel)
# [문제1]
# 문자열에서 정규표현식을 사용하여 전화번호를 추출하라
# 국번은 2,3자리, 중간번호는 3,4자리, 끝번호는 4자리
# 예시: "02-123-1234", "02-1234-1234", "031-1234-5678"
tel <- c("02-123-1234", "02-1234-1234", "031-1234-5678")
class(tel)
mode(tel)
# [문제1]
# 문자열에서 정규표현식을 사용하여 전화번호를 추출하라
# 국번은 2,3자리, 중간번호는 3,4자리, 끝번호는 4자리
# 예시: "02-123-1234", "02-1234-1234", "031-1234-5678"
tel <- c("02-123-1234", "02-1234-1234", "031-1234-5678")
class(tel)
mode(tel)
str_extract(tel,"[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}")
tel_e <- str_extract(tel,"[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}")
class(tel_e)
mode(tel_e)
idns <- "990131-1234567"
str_extract(idns,"[0-9]{6}-[1-4]{1}[0-9]{6}")
tel_e[1]
# [문제1]
# 문자열에서 정규표현식을 사용하여 전화번호를 추출하라
# 국번은 2,3자리, 중간번호는 3,4자리, 끝번호는 4자리
# 예시: "02-123-1234", "02-1234-1234", "031-1234-5678"
tel <- c("02-123-1234", "02-1234-1234", "031-1234-5678")
for (tel in tels) {
cat(tel,'\n')
}
# [문제1]
# 문자열에서 정규표현식을 사용하여 전화번호를 추출하라
# 국번은 2,3자리, 중간번호는 3,4자리, 끝번호는 4자리
# 예시: "02-123-1234", "02-1234-1234", "031-1234-5678"
tels <- c("02-123-1234", "02-1234-1234", "031-1234-5678")
for (tel in tels) {
cat(tel,'\n')
str_extract_all(tel,"[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}")
}
tel_e[2]
# [문제2]
# 문자열에서 정규표현식을 사용하여 주민번호를 추출하라.
# 주민번호:
#  -첫번째 숫자는 6자리
#  -두번째 숫자는 7자리
#  -두번째 숫자의 첫자리 1-4
# 예시: "990131-1234567", "990131-223456","990131-3234567","990131-4234567"
regs <- c("990131-1234567", "990131-223456","990131-3234567","990131-4234567")
for reg in regs{
for(reg in regs){
r <- str_extract(reg,"[0-9]{6}-[1-4]{1}[0-9]{6}")
cat(reg,":",r)
}
cat(reg,":",r,"\n")
for(reg in regs){
r <- str_extract(reg,"[0-9]{6}-[1-4]{1}[0-9]{6}")
cat(reg,":",r,"\n")
}
# [문제2]
# 문자열에서 정규표현식을 사용하여 주민번호를 추출하라.
# 주민번호:
#  -첫번째 숫자는 6자리
#  -두번째 숫자는 7자리
#  -두번째 숫자의 첫자리 1-4
# 예시: "990131-1234567", "990131-223456","990131-3234567","990131-4234567"
regs <- c("990131-1234567", "990131-2234567","990131-3234567","990131-4234567")
for(reg in regs){
r <- str_extract(reg,"[0-9]{6}-[1-4][0-9]{6}")
cat(reg,":",r,"\n")
}
for(reg in regs){
r <- str_extract(reg,"[0-9]{6}-[1234][0-9]{6}")
cat(reg,":",r,"\n")
}
regs <- c("990131-1234567", "990131-2234567","990131-3234567","990131-4234567","010131-3234567","020131-4234567")
for (reg in regs) {
r1 <- str_extract(reg, "[1-9]{6}-[12][0-9]{6}")
r2 <- str_extract(reg, "[1-9]{6}-[34][0-9]{6}")
}
r1
regs <- c("990131-1234567", "990131-2234567","990131-3234567","990131-4234567","010131-3234567","020131-4234567")
for (reg in regs) {
r1 <- str_extract(reg, "[0-9]{6}-[12][0-9]{6}")
r2 <- str_extract(reg, "[0-9]{6}-[34][0-9]{6}")
}
r1
r2
for (reg in regs) {
r1 <- str_extract_all(reg, "[0-9]{6}-[12][0-9]{6}")
r2 <- str_extract_all(reg, "[0-9]{6}-[34][0-9]{6}")
}
r1
r2
regs <- c("990131-1234567", "990131-2234567","990131-3234567","990131-4234567","010131-3234567","020131-4234567")
for (reg in regs) {
r1 <- str_extract_all(reg, "[0-9]{6}-[12][0-9]{6}")
r2 <- str_extract_all(reg, "[0-9]{6}-[34][0-9]{6}")
}
r1
r2
r1 <- str_extract_all(reg, "[0-9]{6}-[12][0-9]{6}")
r2 <- str_extract_all(reg, "[0-9]{6}-[34][0-9]{6}")
r1
r2
regs <- c("990131-1234567", "990131-2234567","990131-3234567","990131-4234567","010131-3234567","020131-4234567")
r1 <- str_extract_all(reg, "[0-9]{6}-[12][0-9]{6}")
r2 <- str_extract_all(reg, "[0-9]{6}-[34][0-9]{6}")
r1
r2
r1 <- str_extract_all(regs, "[0-9]{6}-[12][0-9]{6}")
r2 <- str_extract_all(regs, "[0-9]{6}-[34][0-9]{6}")
r1
r2
