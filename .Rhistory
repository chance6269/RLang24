} else if (score >= 70) {
grade = 'C'
} else {
grade = 'D'
}
cat('당신의 점수는:', score)
cat('당신의 등급은:', grade)
grade <- 'D'
if (score >= 90) {
grade = 'A'
} else if (score >= 80) {
grade = 'B'
} else if (score >= 70) {
grade = 'C'
} else {
grade = 'D'
}
cat('당신의 점수는:', score)
cat('당신의 등급은:', grade)
grade <- 'D'
if (score >= 90) {
grade = 'A'
} else if (score >= 80) {
grade = 'B'
} else if (score >= 70) {
grade = 'C'
} else {
grade = 'D'
}
cat('당신의 점수는:', score)
cat('당신의 등급은:', grade)
score <- 60
grade <- 'D'
if (score >= 90) {
grade = 'A'
} else if (score >= 80) {
grade = 'B'
} else if (score >= 70) {
grade = 'C'
} else {
grade = 'D'
}
cat('당신의 점수는:', score)
cat('당신의 등급은:', grade)
guide <- ifelse(score >= 80, '우수', '노력')
cat('당신의 점수는:', score)
cat('당신의 등급은:', grade)
cat('당신의 가이드:', guide)
score <- 75
guide <- ifelse(score >= 80, '합격', '불합격')
cat("당신의 시험에 '", guide, "'하였습니다.", sep='')
score <- seq(50,100,10)
score
exam <- ifelse(score >= 80, '합격', '불합격')
exam
scores <- seq(50,100, 10)
scores
exam <- ifelse(scores >= 80, '합격', '불합격')
exam
scores <- scores[3]
score
scores
scores <- seq(50,100, 10)
score <- scores[3]
score
pass <- ifelse(score >= 70, '합격','불합격')
pass
fails <- ifelse(scores < 60, '불합격','합격')
fails
scores <-c(seq(50,100, 10), NA)
scores
ifelse(is.na(scores), 0, scores)
scores
ifelse(is.na(scores), 0, scores)
scores
# 결측치 처리: NA <- 0
# 이상치 처리: 음수 <- 0
scores <- ifelse(is.na(scores) | scores < 0, 0, scores)
scores # [1]  50  60  70  80  90 100   0
scores <-c(seq(50,100, 10), NA, 99, -10)
scores # [1]  50  60  70  80  90 100  NA 99 -10
# 결측치 처리: NA <- 0
# 이상치 처리: 음수 <- 0
scores <- ifelse(is.na(scores) | scores < 0, 0, scores)
scores # [1]  50  60  70  80  90 100   0
a <- 10
b <- 20
c <- 30
r1 <- switch ('a',
x = 100,y=200,a=300
)
a <- 10
b <- 20
c <- 30
r1 <- switch ('a',
x = 100,y=200,a=300
)
a1 <- switch ('a',
x = 100,y=200,a=300
)
a1
b1 <- switch ('b',
x = 100,y=200,a=300
)
b1
what <- 'c'
cx <- switch(what, x=100, y=200, a=300, c=400)
cx
rx <- 400
rx = NA
if(what == 'c') {
rx <- 400
}
rx
ry <- switch("y", x=c(1,3,5), y=c(2,4,6))
ry
no <- c(1:5)
name <- c("홍","이","박","최","김"
name <- c("홍","이","박","최","김")
name <- c("홍","이","박","최","김")
score <- c(60,70,80,90,100)
exam <- data.frame(학번=no, 이름=name, 성적=score)
exam
no <- seq(10,50,10)
exam <- data.frame(학번=no, 이름=name, 성적=score)
exam
kim <- which(exam$이름 == '김')
kim
exam[kim,]
for(n in c(1:5)){
cat('n=', n, '\n')
}
tot <- 0
for (n in c(1:100)) {
tot <- tot + n
}
cat('1부터 100까지의 합은',tot)
# 1부터 10까지의 연속된 수에서 홀수의 합 구하기
x <- seq(1,10)
odd <- 0
for (n in x) {
if (n %% 2 == 1){
odd <- odd+n
}
}
odd
even <- 0
for (n in x) {
if (n %% 2 == 1){
odd <- odd+n
} else{
even <- even+n
}
}
odd
odd <- 0
# 짝수의 합 구하기
even
# 1~10 홀수의 합
result <- 0
for (n in seq(1,10,2)) {
result <- result+n
}
result
t <- 0
s <- 0
c <- 0
n <- 10
while(s <= n) {
s <- s+c
t <- t+s
}
while(s <= n) {
s <- s+c
t <- t+s
}
while(s <= n) {
s <- s+c
t <- t+s
}
c <- 1
while(s <= n) {
s <- s+c
t <- t+s
}
cat("1부터", n, "까지의 합은?", t)
t <- 0
s <- 0
c <- 1
n <- 10
while(s < n) {
s <- s+c
t <- t+s
}
cat("1부터", n, "까지의 합은?", t)
# 1부터 10까지의 연속된 수에서 홀수의 합 구하기
total <- 0
count <- 0
# 1부터 10까지의 연속된 수에서 홀수의 합 구하기
odd <- 0
count <- 0
count <- 0
while(count<=10){
count <- count+1
if (count%%2==1) {
odd <- odd+count
}
}
cat("1부터 10까지의 홀수의 합은?", odd, '\n')
sum(1,3,5,7,9)
while(count<10){
count <- count+1
if (count%%2==1) {
odd <- odd+count
}
}
cat("1부터 10까지의 홀수의 합은?", odd, '\n')
count <- 0
while(count<10){
count <- count+1
if (count%%2==1) {
odd <- odd+count
}
}
cat("1부터 10까지의 홀수의 합은?", odd, '\n')
# 1부터 10까지의 연속된 수에서 홀수의 합 구하기
odd <- 0
count <- 0
while(count<10){
count <- count+1
if (count%%2==1) {
odd <- odd+count
}
}
cat("1부터 10까지의 홀수의 합은?", odd, '\n')
# 1부터 10까지의 연속된 수에서 짝수의 합 구하기
even <- 0
count <- 0
while(count<10){
count <- count+1
if (count%%2==0) {
even <- even+count
}
}
cat("1부터 10까지의 짝수의 합은?", even, "\n")
# 문제3. 1부터 10까지 연속된 수에서 홀수와 짝수 각각의 합을 하나의 반복문으로 구하라
odd <- 0
even <- 0
count <- 0
while(count<10){
count <- count+1
if (count%%2==0) {
even <- even+count
} else {
odd <- odd+count
}
}
cat("1부터 10까지의 홀수의 합은?", odd, '\n')
cat("1부터 10까지의 짝수의 합은?", even, "\n")
# 숫자가 -10~10 1씩 증가하는 연속적으로 반복되는 숫자
# 양의 3의 배수를 구하라
cnt <- -10
max <- 10
tot <- 0
while (TRUE) { # 무한 루프
if (cnt <= 0) {
next
}
if (cnt==max) {
break
}
cnt <- cnt+1
cat('cnt=',cnt,'\n')
if (cnt%%3==0) {
tot <- tot+cnt
}
}
while (TRUE) { # 무한 루프
cnt <- cnt+1
cat('cnt=',cnt,'\n')
if (cnt <= 0) {
next
}
if (cnt==max) {
break
}
if (cnt%%3==0) {
tot <- tot+cnt
}
}
cat("1부터 10까지의 3의 배수의 합은?",tot,'\n')
# 숫자가 -10~10 1씩 증가하는 연속적으로 반복되는 숫자
# 양의 3의 배수를 구하라
cnt <- -10
max <- 10
tot <- 0
while (TRUE) { # 무한 루프
cnt <- cnt+1
if (cnt>max) {
break
}
if (cnt <= 0) {
next
}
if (cnt%%3==0) {
tot <- tot+cnt
}
cat('cnt=',cnt,'\n')
}
# 숫자가 -10~10 1씩 증가하는 연속적으로 반복되는 숫자
# 양의 3의 배수를 구하라
cnt <- -10
max <- 10
tot <- 0
while (TRUE) { # 무한 루프
cnt <- cnt+1
if (cnt>max) {
break
}
if (cnt <= 0) {
next
}
if (cnt%%3==0) {
cat("[3의배수]",cnt)
tot <- tot+cnt
}
cat('cnt=',cnt,'\n')
}
# 숫자가 -10~10 1씩 증가하는 연속적으로 반복되는 숫자
# 양의 3의 배수를 구하라
cnt <- -10
max <- 10
tot <- 0
while (TRUE) { # 무한 루프
cnt <- cnt+1
if (cnt>max) {
break
}
if (cnt <= 0) {
next
}
if (cnt%%3==0) {
cat("[3의배수]")
tot <- tot+cnt
}
cat('cnt=',cnt,'\n')
}
# 숫자가 -10~10 1씩 증가하는 연속적으로 반복되는 숫자
# 양의 3의 배수를 구하라
cnt <- -10
max <- 10
tot <- 0
while (TRUE) { # 무한 루프
cnt <- cnt+1
if (cnt>max) {
break
}
if (cnt <= 0) {
next
}
if (cnt%%3==0) {
cat("[3의배수] ")
tot <- tot+cnt
}
cat('cnt=',cnt,'\n')
}
# 숫자가 -10~10 1씩 증가하는 연속적으로 반복되는 숫자
# 양의 3의 배수를 구하라
cnt <- -10
max <- 10
tot <- 0
while (TRUE) { # 무한 루프
cnt <- cnt+1
if (cnt>max) {
break
}
if (cnt <= 0) {
next
}
if (cnt%%3==0) {
cat("[3의배수] ")
tot <- tot+cnt
}
cat('cnt=',cnt,'\n',sep = '')
}
# 숫자가 -10~10 1씩 증가하는 연속적으로 반복되는 숫자
# 양의 3의 배수를 구하라
cnt <- -10
max <- 10
tot <- 0
repeat {
cnt <- cnt+1
if (cnt>max) {
break
}
if (cnt <= 0) {
next
}
if (cnt%%3==0) {
cat("[3의배수] ")
tot <- tot+cnt
}
cat('cnt=',cnt,'\n',sep = '')
}
v <- c(1:10)
# 함수 sum(벡터)
# 벡터에서 요소의 합을 리턴
sum(v)
t <- 0
for(n in v) {
t <- t+n
}
cat("합계:", t)
add <- function(a,b) {
c <- a+b
return(c)
}
# 함수호출
ab <- add(10,20)
ab
sub <- function(a, b){
c <- a-b
return(c)
}
sub(10,4)
#파라미터를 지정하여 호출하면 전달하는 순서를 변경할 수 있다.
sub(b=20,a=7)
calc <- function(a,b){
d <- a-b
return(d)
}
calc(10,20,4)
calc(10)
x <- calc(10,20)
# 함수정의
calc <- function(a, b, c=1){
d <- (a-b)*c
print(d)
}
x <- calc(10,20)
# 홀수 또는 짝수의합을 구하는 함수
# opt: 짝수-0, 홀수-1
sumx <- function(x, opt){
s <- 0
l <- length(x)
for (n in c(1:l)) {
y <- x[n]
if(y %% 2 == opt) {
s <- s+y
}
}
return(s)
}
# 인자가 스칼라인 경우도 ㅔㅂㄱ터처럼 처리 가능
z <- 9
z[1]
length(9)
xx <- sumx(9,1)
xx
cat_nine <- function(start, end){
# for문 시작단부터 종료단까지 반복
for (n in c(start:end)) {
# 1단부터 9단까지 반복
for (num in (1:9)) {
cat(n, 'X', num,'=',n*num)
}
}
}
cat_nine(3,8)
cat_nine <- function(start, end){
# for문 시작단부터 종료단까지 반복
for (n in c(start:end)) {
# 1단부터 9단까지 반복
for (num in (1:9)) {
cat(n, 'X', num,'=',n*num,'\n')
}
}
}
cat_nine(3,8)
cat_nine <- function(start, end){
# for문 시작단부터 종료단까지 반복
for (n in c(start:end)) {
cat('[',n,'단]\n')
# 1단부터 9단까지 반복
for (num in (1:9)) {
cat(n, 'X', num,'=',n*num,'\n')
}
}
}
cat_nine(3,8)
cat_nine <- function(start, end){
# for문 시작단부터 종료단까지 반복
for (n in c(start:end)) {
cat('[',n,'단]\n',sep='')
# 1단부터 9단까지 반복
for (num in (1:9)) {
cat(n, 'X', num,'=',n*num,'\n')
}
}
}
cat_nine(3,8)
cat_nine <- function(start, end){
# for문 시작단부터 종료단까지 반복
for (n in c(start:end)) {
cat('\n[',n,'단]\n',sep='')
# 1단부터 9단까지 반복
for (num in (1:9)) {
cat(n, 'X', num,'=',n*num,'\n')
}
}
}
cat_nine(3,8)
