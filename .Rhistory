sum(seq(s,l,2))
n <- 10
s <- 1
v <- c(s:n)
l <- length(v)
seq(s, l, 2)
sum(seq(s,l,2))
sum(v[seq(s,l,2)])
sum(v[seq(s+1,l,2)])
# 3. 벡터 1부터 12까지 12개 요소로 구성된 3행 2열 2면의 array 생성하기
a322 <- array((1:13),c(3,2,2))
a322
# 3. 벡터 1부터 12까지 12개 요소로 구성된 3행 2열 2면의 array 생성하기
a322 <- array((1:14),c(3,2,2))
a322
nx <- seq(1,10,2)
lt <- list(nx, ax)
ax <- c('a','b','c')
lt <- list(nx, ax)
lt
lt[1]
lt[2]
# 참조
lt[[2]]
# 성격과 구조
mode(lt)
class(lt)
# 길이
length(lt)
ssl <- list('이순신', '조선의 장군', 55)
# 원소명 지정
ssl2 <-  list(name='이순신', title='조선의 장군', age=55)
ssl[[1]]
ssl[[2]]
ssl[[3]]
ssl2$name
ssl2$title
ssl2$age
ssl2.name
ssl2$tel
nx <- seq(1,10,2)
ax <- c('a','b','c')
lt <- list(nx, ax)
# 리스트의 요소에 리스트
lx <- list(a=nx, b=ax, c=lt)
lx
lx$a
lx$c
# 리스트이 리스트 원소의 요소에 접근
lx$c[1]
# 리스트에 새로운 원소 추가
# 리스트$원소명 <- 원소
lx$d <- seq(2,10,2)
lx$d
eno
# 컬럼
no <- c(1,2,3)
name <- c('Kim', "Lee","Choi")
pay <- c(200,300,400)
# 데이터프레임
emp <- data.frame(No=no, Name=name, Pay=pay)
emp
mode(emp)
class(emp)
str(emp)
# 컬럼의 갯수
ncol(emp)
# 행의 갯수
nrow(emp)
# 컬럼
no <- c(1,2,3,4)
name <- c('Kim', "Lee","Choi","Park")
pay <- c(200,300,400, 500)
# 행의 갯수
nrow(emp)
# 데이터프레임
emp <- data.frame(No=no, Name=name, Pay=pay)
# 행의 갯수
nrow(emp)
# 컬럼명
names(emp)
# 요약: 데이터
summary(emp)
emp
str(emp)
# 컬럼명
names(emp) # [1] "No"   "Name" "Pay"
# 참조: 컬럼
emp$No
emp$Name
emp$Pay
# 컬럼
no <- c(1,2,3,4,5,6)
name <- c('Kim', "Lee","Choi","Park")
pay <- c(200,300,400, 500, 1)
# 데이터프레임
emp <- data.frame(No=no, Name=name, Pay=pay)
emp
mx <- matrix(c(1,'홍길동',100,'2','이순신',200,3,'강감찬',400), nrow = 3)
mx
mx <- matrix(c(1,'홍길동',100,'2','이순신',200,3,'강감찬',400), nrow = 3, byrow = T)
mx
mx <- matrix(c(1,'홍길동',100,2,'이순신',200,3,'강감찬',400), nrow = 3, byrow = T)
mx
# 데이터프레임
emp <- data.frame(mx)
emp
# 컬럼명 변경
colnames(emp) <- c("번호","이름","급여")
names(emp)
emp
# 참조
emp$name
# 참조
emp$번호
emp$이름
emp$급여
# 행번호로 참조
emp[1,]
emp[2,]
emp[,1]
# 범위지정
emp(2:3, 2:3)
# 범위지정
emp[2:3, 2:3]
# 컬럼 형 변환
emp$급여 <- as.numeric(emp$급여)
emp$번호 <- as.integer(emp$번호)
# 데이터프레임 실습
no <- (1:5)
# 데이터프레임 실습
no <- (1:4)
name <- c('John','Jane','Jose','Josh')
score <- c(100,200,300,400)
data.frame(No=no,Name=name,Score=score)
emp <- data.frame(No=no,Name=name,Score=score)
emp
mode(emp$Score)
# 총 스코어의 합
apply(emp, 1, sum)
# 총 스코어의 합
apply(emp$Score, 1, sum)
# 총 스코어의 합
apply(emp$Score, 1, sum)
# 총 스코어의 합
apply(emp$Score, 2, sum)
emp$Score
sum(emp$Score)
# 총 스코어의 합
apply(emp, 1, max)
# 총 스코어의 합
apply(emp, 2, max)
score <- c(500,200,300,400)
emp <- data.frame(No=no,Name=name,Score=score)
#
apply(emp, 2, max)
#
apply(emp, 2, min)
#
apply(emp[c(1,3)], 2, min)
#
apply(emp[3], 2, min)
#
apply(emp[3], 1, min)
#
apply(emp[3], 1, max)
#
apply(emp[3], 2, max)
apply(emp$Score, 2, mean)
apply(emp$Score, 2, max)
apply(emp$Score, 1, max)
emp$Score
emp[3]
mode(emp$Score)
class(emp$Score)
class(emp[3])
class(emp$Score)
summary(emp)
#
apply(emp[[3]], 2, max)
class(emp[[3])
class(emp[[3]])
apply(emp[,c(1,2)],1,sum)
apply(emp[,c(1,2)],1,sum)
apply(emp[,c(1,2)],1,sum)
apply(emp[,c(1,3)],1,sum)
apply(emp[,c(1,3)],2,sum)
a <- 10
b <- 20
c <- a + b * 2 / 2
# 나머지
x <- 10
y <- 3
z <- x / y
z
# 나머지
m <- x %% y
m # 1
# 몫
m <- x%/%y
m
# 나머지
n <- x %% y
n # 1
# 몫과 나머지 연산자를 사용하지 않고 몫과 나머지 구하기
n1 = 10
n2 = 5
n3 <- n1 / n2
n2 <-  4
n3 <- n1 / n2
result <- 0
mod <- 0
while (mode<y) {
if (mode <- x-y) {
result <- result + 1
}
}
if (mode < x-y) {
result <- result + 1
}
while (mod<y) {
if (mod < x-y) {
result <- result + 1
}
}
a <- 10
a <- 10
b <- 20
c <- a + b * 2 / 2
# 나누기
x <- 10
y <- 3
z <- x / y
z # 3.333
# 몫과 나머지 연산자를 사용하지 않고 몫과 나머지 구하기
m <- x/y
m
m <- as.integer(m)
n <- x-y*m
n
a <- 1
b <- 2
c <- 3
eq <- a == b
eq
ne <- a != b
ne
gt <- a>b
gt
ge <- a >= b
ge
sl <- a < b
sl
se <- a <= b
se
ac <- a != b & b != c
ac
ac <- a > b | b == c
oc <- a > b | b == c
oc
bc <- a > b | b < c
bc
# 논리부정
nf <- !bc
nf
nx <- !nf
nx
n0 <- !0
n0
n1 <- !1
n1
0
!0
!2
FALSE < 5
a <- c(0,2,4)
b <- c(1,2,3)
c <- a + b
c
d <- a - b
d
eq <- a & b
eq # FALSE TRUE TRUE
lor
lor <- a | b
lor
a <- c(0,2,4, 5)
# 벡터 연산은 같은 인덱스끼리 연산
# 요소 갯수 만큼 벡터를 리턴
c <- a + b
c # 1 4 7
c <- a + b
c
d <- a - b
d # -1 0 1
# x % in% v
in3 <- 3 %in% a
in3
in5 <- 5 %in% a
in5
inx <- b %in% a
inx
a <- 10
b <- 20
# a가 b보다 크면 블록 안에 명령문을 실행
if(a>b){
print('a는 b보다 크다')
}
if(a>b){
print('a는 b보다 크다')
}
if(a>b){
cat('a는 b보다 크다')
}
# a가 b보다 크면 블록 안에 명령문을 실행
if(a>b){
cat('a는 b보다 크다')
}
# a가 b보다 크면 블록 안에 명령문을 실행
if(a<b){
cat('a는 b보다 크다')
}
a <- 30
# a가 b보다 크면 블록 안에 명령문을 실행
if(a>b){
cat('a는 b보다 크다')
}
c <- 0
# a가 b보다 크면 블록 안에 명령문을 실행
if(a>b){
cat('a는 b보다 크다')
c <- a+b
}
cat('c=',c)
a <- 10
c <- 0
# a가 b보다 크면 블록 안에 명령문을 실행
if(a>b){
cat('a는 b보다 크다')
c <- a+b
} else {
cat('a는 b보다 크지 않다')
c <- b - a
}
cat('c=',c)
score <- 100
grade <- 'D'
if (score >= 90) {
grade = 'A'
} else if (score >= 80) {
grade = 'B'
} else if (score >= 70) {
grade = 'C'
} else {
grade = 'D'
}
cat('당신의 점수는:', score)
cat('당신의 등급은:', grade)
score <- 90
grade <- 'D'
if (score >= 90) {
grade = 'A'
} else if (score >= 80) {
grade = 'B'
} else if (score >= 70) {
grade = 'C'
} else {
grade = 'D'
}
cat('당신의 점수는:', score)
cat('당신의 등급은:', grade)
grade <- 'D'
if (score >= 90) {
grade = 'A'
} else if (score >= 80) {
grade = 'B'
} else if (score >= 70) {
grade = 'C'
} else {
grade = 'D'
}
cat('당신의 점수는:', score)
cat('당신의 등급은:', grade)
grade <- 'D'
if (score >= 90) {
grade = 'A'
} else if (score >= 80) {
grade = 'B'
} else if (score >= 70) {
grade = 'C'
} else {
grade = 'D'
}
cat('당신의 점수는:', score)
cat('당신의 등급은:', grade)
score <- 60
grade <- 'D'
if (score >= 90) {
grade = 'A'
} else if (score >= 80) {
grade = 'B'
} else if (score >= 70) {
grade = 'C'
} else {
grade = 'D'
}
cat('당신의 점수는:', score)
cat('당신의 등급은:', grade)
guide <- ifelse(score >= 80, '우수', '노력')
cat('당신의 점수는:', score)
cat('당신의 등급은:', grade)
cat('당신의 가이드:', guide)
score <- 75
guide <- ifelse(score >= 80, '합격', '불합격')
cat("당신의 시험에 '", guide, "'하였습니다.", sep='')
score <- seq(50,100,10)
score
exam <- ifelse(score >= 80, '합격', '불합격')
exam
