df_exam <- read_excel(".\Part02\excel_exam.xlsx")
df_exam <- read_excel(".\Part02\excel_exam.xlsx")
df_exam <- read_excel("./Part02/excel_exam.xlsx")
library(readxl)
df_exam <- read_excel("./Part02/excel_exam.xlsx")
df_exam
mean(df_exam$english)
mean(df_exam$science)
df_exam_novar <- read_excel("./Part02/excel_exam_novar.xlsx")
df_exam_novar
df_exam_novar <- read_excel("./Part02/excel_exam_novar.xlsx",col_names = F)
df_exam_novar
df_exam
df_exam_sheet <- read_excel("./Part02/excel_exam_sheet.xlsx", sheet = 3)
df_exam_sheet
df_csv_exam <- read.csv("csv_exam.csv")
df_csv_exam <- read.csv("./Part02/csv_exam.csv")
df_csv_exam
df_midterm <- data.frame(english = c(90,80,60,70),
math = c(50, 60, 100, 20),
class = c(1, 1, 2, 2))
df_midterm
write.csv(df_midterm, "csv_exam.csv")
saveRDS(df_midterm, "./Part02/df_midterm.rds")
rm(df_midterm)
df_midterm
df_midterm <- readRDS("./Part02/df_midterm.rds")
df_midterm
english <- c(90,80,60,70)
math <- c(50,60,100,20)
df_midterm <- dadta.frame(english, math)
load("./Part02/df_midterm.rds")
getwd()
load("./Part02/df_midterm.rds")
# RDS 불러오기
df_midterm <- readRDS("./Part02/df_midterm.rds")
load("./Part02/df_midterm.rds")
save(df_midterm, file = "df_midterm.rds")
load("df_midterm.rds")
exam <- read.csv("./Part02/csv_exam.csv")
head(exam)
head(exam)
exam <- read.csv("./Part02/csv_exam.csv")
head(exam)
exam
exam <- read.csv("./Part02/csv_exam.csv")
exam
head(exam)
head(exam, 10)
tail(exam)
tail(exam, 10)
view(exam)
# 데이터 뷰어 창에서 exam 데이터 확인
View(exam)
dim(exam)
# 속성 파악하기
str(exam)
summary(exam) # 요약 통계량 출력
#
mpg <- as.data.frame(ggplot::mpg)
#
mpg <- as.data.frame(ggplot2::mpg)
head(mpg)
tail(mpg)
View(mpg)
dim(mpg)
str(mpg)
?mpg
summary(mpg)
# 5-2 변수명 바꾸기
df_raw <- data.frame(var1 = c(1, 2, 1),
var2 = c(2, 3, 2))
df_raw
install.packages("dplyr")
library(dplyr)
# 데이터프레임 복사본 만들기
df_new <- df_raw
df_new
# 변수명 바꾸기
df_new <- rename(df_new, v2 = var2)
df_vew
df_new
df_mpg <- as.data.frame(ggplot2::mpg)
mpg <- as.data.frame(ggplot2::mpg)
mpg_new <- mpg
mpg_new <- rename(mpg_new, city=cty, highway=hwy)
mpg_new
head(mpg_new)
# 05-3 파생변수 만들기
df <- data.frame(var1 = c(4, 3, 8),
var2 = c(2, 6, 1))
df
df$var_sum <- df$var1 + df$var2 # var_sum 파생변수 생성
df
df$var_mean <- (df$var1+df$var2)/2
df
# mpg 통합 연비 변수 만들기
mpg$total <- (mpg$cty + mpg$hwy)/2 # 통합 연비 변수 생성
head(mpg)
mean(mpg$total)
# 1. 기준값 정하기
summary(mpg$total)
hist(mpg$total)
# 20 이상이면 pass, 그렇지 않으면 fail 부여
mpg$test <- ifelse(mpg$total >=20, "pass", "fail")
head(mpg, 20)
# 3. 빈도표로 합격 판정 자동차 수 살펴보기
table(mpg$test) # 연비 합격 빈도표 생성
# 4. 막대 그래프로 빈도 표현하기
qplot(mpg$test) # 연비 합격 빈도 막대 그래프 생성
# 4. 막대 그래프로 빈도 표현하기
library(ggplot2)
qplot(mpg$test) # 연비 합격 빈도 막대 그래프 생성
# total을 기준으로 A, B, C 등급 부여
mpg$grade <- ifelse(mpg$total >= 30, 'A', ifelse(mpg$total >= 20, 'B', 'C'))
head(mpg, 20)
# 빈도표, 막대그래프로 연비 등급 살펴보기
table(mpg$grade)
qplot(mpg$grade)
library(dplyr)
exam <- read.csv("csv_exam.csv")
exam <- read.csv("./Part02/csv_exam.csv")
exam
# exam에서 class가 1인 경우만 추출해 출력
exam %>% filter(class == 1)
exam %>% filter(class == 2)
exam %>% filter(class != 1)
# 초과, 미만, 이상, 이하 조건걸기
exam %>% filter(math > 50)
exam %>% filter(math < 50)
exam %>% filter(english >= 50)
exam %>% filter(english >= 80)
exam %>% filter(english <= 80)
# 여러 조건을 충족하는 행 추출하기
exam %>% filter(class == 1 & math >= 50)
exam %>% fitler(class == 2 & english >= 80)
exam %>% filter(class == 2 & english >= 80)
exam %>% filter(math >= 90 | english >= 90)
# 목록에 해당하는 행 추출하기
exam %<% filter(class == 1 | class == 3|class==5)
# 목록에 해당하는 행 추출하기
exam %>% filter(class == 1 | class == 3|class==5)
exam %>% filter(class %in% c(1,3,5))
class1 <- exam %>% filter(class == 1)
class2 <- exam %>% filter(class == 2)
mean(class1$math)
mean(class2$math)
