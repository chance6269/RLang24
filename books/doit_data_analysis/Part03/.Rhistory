exam %>%
mutate(total = math+english+science,
mean = (math+english+science)/3) %>%
head()
# mutate()에 ifelse() 적용
exam %>%
mutate(test = ifelse(science >= 60, 'pass', 'fail')) %>%
head()
# 추가한 변수를 dplyr 코드에 바로 활용하기
exam %>%
mutate(total = math + english + science) %>%
arrange(total) %>%
head
# mutate()에 ifelse() 적용
exam_test <- exam %>%
mutate(test = ifelse(science >= 60, 'pass', 'fail')) %>%
# 추가한 변수를 dplyr 코드에 바로 활용하기
exam %>%
mutate(total = math + english + science) %>%
arrange(total) %>%
head
# mutate()에 ifelse() 적용
exam_test <- exam %>%
mutate(test = ifelse(science >= 60, 'pass', 'fail')) %>%
# 추가한 변수를 dplyr 코드에 바로 활용하기
exam %>%
mutate(total = math + english + science) %>%
arrange(total) %>%
head
# mutate()에 ifelse() 적용
exam_test <- exam %>%
mutate(test = ifelse(science >= 60, 'pass', 'fail'))
exam %>% summarise(mean_math = mean(math))
# 집단별로 요약하기
# group_by() : 변수 항목별로 데이터를 분리
exam %>%
group_by(class) %>%
summarise(mean_math = mean(math))
# 여러 요약 통계량 한 번에 산출하기
exam %>%
group_by(class) %>%
summarise(mean_math = mean(math),
sum_math = sum(math),
median_math = median(math),
n = n())
# 각 집단별로 다시 집단 나누기
mpg %>%
group_by(manufacturer, drv) %>% #회사별, 구동 방식별 분리
summarise(mean_cty = mean(cty)) %>% # cty 평균 산출
head(10)
mpg
# 회사별로 suv 자동차의 도시 및 고속도로 통합 연비 평균을 구해 내림차순으로 정렬하고, 1~5위까지 출력하기
# group_by, filter, summarise, arrange, head
mpg %>%
group_by(manufacturer) %>%  # 회사별로 분리
filter(class=='suv') %>% # suv 자동차 선택
summarise(mean_ay = mean(cty+hwy)) %>%
arrange(desc(mean_ay)) %>%
head(5)
# 회사별로 suv 자동차의 도시 및 고속도로 통합 연비 평균을 구해 내림차순으로 정렬하고, 1~5위까지 출력하기
# group_by, filter, summarise, arrange, head
mpg %>%
group_by(manufacturer) %>%  # 회사별로 분리
filter(class=='suv') %>% # suv 자동차 선택
summarise(mean_ay = mean(cty+hwy/2)) %>%
arrange(desc(mean_ay)) %>%
head(5)
# 회사별로 suv 자동차의 도시 및 고속도로 통합 연비 평균을 구해 내림차순으로 정렬하고, 1~5위까지 출력하기
# group_by, filter, summarise, arrange, head
mpg %>%
group_by(manufacturer) %>%  # 회사별로 분리
filter(class=='suv') %>% # suv 자동차 선택
summarise(mean_ay = mean((cty+hwy)/2)) %>%
arrange(desc(mean_ay)) %>%
head(5)
# 1. mpg 데이터 복사본을 만들고 cty와 hwy를 더한 합산 연비변수를 추가하라
mpg <- as.data.frame(ggplot2::mg)
# 1. mpg 데이터 복사본을 만들고 cty와 hwy를 더한 합산 연비변수를 추가하라
mpg <- as.data.frame(ggplot2::mpg)
mpg2 <- mpg
# mutate()
mpg <- mpg %>%
mutate(tot = cty+hwy) # 합산 연비변수 추가
# 1. mpg 데이터 복사본을 만들고 cty와 hwy를 더한 합산 연비변수를 추가하라
mpg <- as.data.frame(ggplot2::mpg)
# mutate()
mpg2 <- mpg %>%
mutate(tot = cty+hwy) # 합산 연비변수 추가
mpg2
head(mpg2)
# 2. 앞에서 만든 합산 연비 변수를 2로 나눠 평균mpg# 2. 앞에서 만든 합산 연비 변수를 2로 나눠 평균 연비 변수를 추가하라
mpg2 <- mpg2 %>%
mutate(mean_tot = tot/2)
head(mpg2)
# 3. 평균 연비 변수가 가장 높은 자동차 3종의 데이터를 출력하라
# arrange()
mpg2 %>%
arrange(desc(mean_tot)) %>%
head(3)
# 중간고사 데이터 생성
test1 <- data.frame(id = c(1,2,3,4,5),
midterm = c(60,80,70,90,85))
# 기말고사 데이터 생성
test2 <- data.frame(id = c(1,2,3,4,5),
final = c(70,83,65,95,80))
test1
test2
# left_join()
total <- left_join(test1, test2, by = 'id')
total
# 다른 데이터를 활용해 변수 추가하기
# 반별 담임교사 명단 데이터
name <- data.frame(class = c(1,2,3,4,5),
teacher = c('kim','lee','park','choi','jung'))
name
exam_new <- left_join(exam, name, by = 'class')
exam_new
#  세로로 합치기
# 학생 시험 데이터 생성
group_a <- data.frame(id = c(1,2,3,4,5),
test = c(60,80,70,90,85))
group_b <- data.frame(id=c(6,7,8,9,10),
test = c(70,83,65,95,80))
group_all <- bind_rows(group_a, group_b)
group_all
# 담임교사 기준으로 합친다면?
teacher <- left_join(name, exam, by = 'id')
teacher
# 담임교사 기준으로 합친다면?
teacher <- left_join(name, exam, by = 'class')
teacher
# 1.
mpg <- as.data.frame(ggplot2::mpg)
mpg_new <- mpg
mpg_new <- mpg_new %>% mutate(total = cty + hwy)
# 2.
mpg_new <- mpg_new %>% mutate(mean = total/2)
# 3.
mpg_new %>%
arrange(desc(mean)) %>%
head(3)
mpg %>%
mutate(total = cty + hwy,
mean = total/2) %>%
arrange(desc(mean)) %>%
head(3)
#
mpg <- as.data.frame(ggplot2::mpg)
fuel <- data.frame(fl = c('c','d','e','p','r'),
price_fl = c(2.35, 2.38, 2.11, 2.76, 2.22))
fuel
# 1. mpg에 연료가격 변수 price_fl을 추가 하라.
mpg <- left_join(mpg, fuel, by='fl')
head(mpg)
mpg %>% select(model,fl,price_fl) %>% head
mpg <- as.data.frame(ggplot2::mpg)
# 1. 어떤 차종의 도시 연비가 높은지 class별 cty 평균을 구하라
# group_by, summarise() mean_cty
mpg %>% group_by(class) %>%
summarise(mean_cty=mean(cty))
# 1. 어떤 차종의 도시 연비가 높은지 class별 cty 평균을 구하라
# group_by, summarise() mean_cty
mpg_cty <- mpg %>% group_by(class) %>%
summarise(mean_cty=mean(cty))
# 2. cty 평균이 높은 순으로 정렬
mpg_cty %>% arrange(desc(mean_cty)) %>% head
# 3. hwy 평균이 가장 높은 회사 세곳을 출력하라
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy=mean(hwy)) %>%
arrange(desc(mean_hwy)) %>%
head(3)
# 4. 각 회사별 compact 차종 수를 내림차순으로 정렬
# group_by(회사별), filter(class=compact),summarise(n()), arrange()
mpg %>%
group_by(manufacturer) %>%
filter(class='compact') %>%
summarise(compact_num=n()) %>%
arrange(desc(compact_num)) %>%
head
# 4. 각 회사별 compact 차종 수를 내림차순으로 정렬
# group_by(회사별), filter(class=compact),summarise(n()), arrange()
mpg %>%
group_by(manufacturer) %>%
filter(class=='compact') %>%
summarise(compact_num=n()) %>%
arrange(desc(compact_num)) %>%
head
midwest <- as.data.frame(ggplot2::midwest)
View(midwest)
head(midwest)
dim(midwest)
str(midwest)
summary(midwest)
# 문제1. 전체 인구 대비 미성년 인구 백분율 변수를 추가하라
# popadults : 해당 지역 성인 인구
# poptotal : 전체 인구
# mutate()
midwest <- midwest %>%
mutate(popchild=poptotal-popadults, childpertot=popchild/popadults * 100)
head(midwest)
midwest <- as.data.frame(ggplot2::midwest)
# 문제1. 전체 인구 대비 미성년 인구 백분율 변수를 추가하라
# popadults : 해당 지역 성인 인구
# poptotal : 전체 인구
# mutate()
midwest <- midwest %>%
mutate(popchild=poptotal-popadults, perchild=popchild/popadults * 100)
head(midwest)
midwest <- as.data.frame(ggplot2::midwest)
# 문제1. 전체 인구 대비 미성년 인구 백분율 변수를 추가하라
# popadults : 해당 지역 성인 인구
# poptotal : 전체 인구
# mutate()
midwest <- midwest %>%
mutate(popchild=poptotal-popadults, perchild=popchild/poptotal * 100)
head(midwest)
midwest <- as.data.frame(ggplot2::midwest)
# 문제1. 전체 인구 대비 미성년 인구 백분율 변수를 추가하라
# popadults : 해당 지역 성인 인구
# poptotal : 전체 인구
# mutate()
midwest <- midwest %>%
mutate(popchild=poptotal-popadults, percchild=popchild/poptotal * 100)
head(midwest)
# 문제2. 미성년인구 백분율이 가장 높은 상위 5개 country의 미성년 인구 백분율을 출력하라
# arrange(desc(percchild))
midwest %>%
arrange(desc(percchild)) %>%
head(5)
# 문제3. 분류표 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보라
# 분류표
# -large : 40% 이상
# -middle : 30~40% 미만
# -small : 30% 미만
# mutate(ifelse), summarise(n())
midwest <- midwest %>%
mutate(percchildgrade=ifelse(percchild>=40,large,ifelse(percchild>=30,middle,small))) %>%
summarise(n())
# 문제3. 분류표 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보라
# 분류표
# -large : 40% 이상
# -middle : 30~40% 미만
# -small : 30% 미만
# mutate(ifelse), summarise(n())
midwest <- midwest %>%
mutate(percchildgrade=ifelse(percchild>=40,'large',ifelse(percchild>=30,'middle','small'))) %>%
summarise(n())
head(midwest)
midwest <- as.data.frame(ggplot2::midwest)
# 문제1. 전체 인구 대비 미성년 인구 백분율 변수를 추가하라
# popadults : 해당 지역 성인 인구
# poptotal : 전체 인구
# mutate()
midwest <- midwest %>%
mutate(popchild=poptotal-popadults, percchild=popchild/poptotal * 100)
# 문제3. 분류표 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보라
# 분류표
# -large : 40% 이상
# -middle : 30~40% 미만
# -small : 30% 미만
# mutate(ifelse), group_by,summarise(n())
midwest <- midwest %>%
mutate(percchildgrade=ifelse(percchild>=40,'large',ifelse(percchild>=30,'middle','small'))) %>%
group_by(percchildgrade) %>%
summarise(count=n()) %>%
head(midwest)
# 문제3. 분류표 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보라
# 분류표
# -large : 40% 이상
# -middle : 30~40% 미만
# -small : 30% 미만
# mutate(ifelse), group_by,summarise(n())
midwest <- midwest %>%
mutate(percchildgrade=ifelse(percchild>=40,'large',ifelse(percchild>=30,'middle','small'))) %>%
group_by(percchildgrade) %>%
summarise(count=n()) %>%
head(midwest)
midwest <- as.data.frame(ggplot2::midwest)
# 문제1. 전체 인구 대비 미성년 인구 백분율 변수를 추가하라
# popadults : 해당 지역 성인 인구
# poptotal : 전체 인구
# mutate()
midwest <- midwest %>%
mutate(popchild=poptotal-popadults, percchild=popchild/poptotal * 100)
# 문제3. 분류표 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보라
# 분류표
# -large : 40% 이상
# -middle : 30~40% 미만
# -small : 30% 미만
# mutate(ifelse), group_by,summarise(n())
midwest <- midwest %>%
mutate(percchildgrade=ifelse(percchild>=40,'large',ifelse(percchild>=30,'middle','small')))
head(midwest)
# 문제2. 미성년인구 백분율이 가장 높은 상위 5개 country의 미성년 인구 백분율을 출력하라
# arrange(desc(percchild))
midwest %>%
arrange(desc(percchild)) %>%
head(5)
# group_by(percchildgrade) %>%
# summarise(count=n()) %>%
midwest %>%
group_by(percchild) %>%
summarise(n=n())
# group_by(percchildgrade) %>%
# summarise(count=n()) %>%
midwest %>%
group_by(percchildgrade) %>%
summarise(n=n())
# 문제2. 미성년인구 백분율이 가장 높은 상위 5개 country의 미성년 인구 백분율을 출력하라
# arrange(desc(percchild))
midwest %>%
select(conuty,percchild) %>%
arrange(desc(percchild)) %>%
head(5)
# 문제2. 미성년인구 백분율이 가장 높은 상위 5개 country의 미성년 인구 백분율을 출력하라
# arrange(desc(percchild))
midwest %>%
select(county,percchild) %>%
arrange(desc(percchild)) %>%
head(5)
# 문제4. 전체 인구대비 아시아인 인구 백분율 변수를 추가하고 하위 10개 지역의 state, county, 아시아인 인구 백분율을 출력하라
# popasian : 해당 지역의 아시아인 인구
midwest %>%
mutate(ratio_asian=popasian/poptotal) %>%
arrange(desc(ratio_asian)) %>%
head(10)
# 문제4. 전체 인구대비 아시아인 인구 백분율 변수를 추가하고 하위 10개 지역의 state, county, 아시아인 인구 백분율을 출력하라
# popasian : 해당 지역의 아시아인 인구
midwest %>%
mutate(ratio_asian=popasian/poptotal) %>%
arrange(desc(ratio_asian)) %>%
head(10) %>%
select(state, county,ratio_asian)
# 문제4. 전체 인구대비 아시아인 인구 백분율 변수를 추가하고 하위 10개 지역의 state, county, 아시아인 인구 백분율을 출력하라
# popasian : 해당 지역의 아시아인 인구
midwest %>%
mutate(ratio_asian=popasian/poptotal) %>%
arrange(ratio_asian) %>%
head(10) %>%
select(state, county,ratio_asian)
# 문제4. 전체 인구대비 아시아인 인구 백분율 변수를 추가하고 하위 10개 지역의 state, county, 아시아인 인구 백분율을 출력하라
# popasian : 해당 지역의 아시아인 인구
midwest %>%
mutate(ratio_asian=popasian/poptotal*100) %>%
arrange(ratio_asian) %>%
head(10) %>%
select(state, county,ratio_asian)
table(midwest$percchildgrade)
df <- data.frame(sex = c('M','F',NA,'M','F'),
score = c(5, 4, 3,4,NA))
df
is.na(df)
table(is.na(df))
table(is.na(df$sex))
table(is.na(df$score))
mean(df$score)
sum(df$score)
library(dplyr)
df %>% filter(is.na(score))
df %>% filter(!is.na(score))
df_nomiss <- df %>% filter(!is.na(score))
mean(df_nomiss$score)
sum(df_nomiss$score)
#  여러 변수 동시에 결측치 없는 데이터 추출하기
df_nomiss <- df %>% filter(!is.na(score) & !is.na(sex))
df_nomiss
# 결측치가 하나라도 있으면 제거하기
# na.omit()
df_nomiss2 <- na.omit(df)
df_nomiss2
mean(df$score, na.rm = T)
sum(df$score, na.rm=T)
# summrise()에서 na.rm
exam <- read.csv("csv_exam.csv")
exam[c(3,8,15), "math"] <- NA
exam
exam %>% summarise(mean_math = mean(math))
exam %>% summarise(mean_math = mean(math), na.rm = T)
exam %>% summarise(mean_math = mean(math,na.rm = T))
exam %>% summarise(mean_math = mean(math, na.rm = T),
sum_math = sum(math, na.rm = T),
median_math = median(math, na.rm = T))
mean(exam$math, na.rm = T)
exam$math <- ifelse(is.na(exam$math), 55, exam$math)
table(is.na(exam$math))
exam
mean(exam$math)
mpg <- as.data.frame(ggplot2::mpg)
mpg[c(65, 124, 131, 153, 212), 'hwy'] <- NA
# Q1. 구동 방식 별로 hwy 평균이 어떻게 다른지 알아보려 한다.
# drv변수와 hwy 변수에 결측치가 몇 개 있는지 알아보자
# is.na()
is.na(mpg$drv)
is.na(mpg$hwy)
table(is.na(mpg$hwy))
table(is.na(mpg$drv))
# Q2. filter()를 이용해 hwy 변수의 결측치를 제외하고, 어떤 구동 방식의 hwy 평균이 높은지 알아보자
# 하나의 dplyr 구문으로 만들어야 한다.
mpg %>%
filter(hwy!=NA) %>%
group_by(drv) %>%
summarise(mean_hwy=mean(hwy))
# Q2. filter()를 이용해 hwy 변수의 결측치를 제외하고, 어떤 구동 방식의 hwy 평균이 높은지 알아보자
# 하나의 dplyr 구문으로 만들어야 한다.
mpg %>%
filter(!is.na(hwy)) %>%
group_by(drv) %>%
summarise(mean_hwy=mean(hwy))
outlier <- data.frame(sex = c(1,2,1,3,2,1),
score = c(5,4,3,4,2,6))
outlier
table(outlier$sex)
table(outlier$score)
# 결측 처리하기
outlier$sex <- ifelse(outlier$sex == 3, NA, outlier$sex)
outlier
outlier$score <- ifelse(outlier$score > 5, NA, outlier$score)
outlier$score
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
# 상자 그림으로 극단치 기준 정하기
boxplot(mpg$hwy)
boxplot(mpg$hwy)$stats # 상자 그림 통계치 출력
# 결측 처리하기
mpg$hwy <- ifelse(mpg$hwy<12|mpg$hwy>37, NA, mpg$hwy)
table(is.na(mpg$hwy))
mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy, na.rm = T))
mpg <- as.data.frame(ggplot2::mpg)
mpg[c(10, 14, 58, 93), 'drv'] <- 'k'
mpg[c(29, 43, 129, 203), 'cty'] <- c(3,4,39,42)
table(is.na(mpg$drv))
table(mpg$drv)
# 4   f   k   r
# 100 106   4  24
mpg$drv <- ifelse(mpg$drv %in% c('4','f','r'),mpg$drv,NA)
table(mpg$drv)
mpg <- as.data.frame(ggplot2::mpg)
mpg[c(10, 14, 58, 93), 'drv'] <- 'k'
mpg[c(29, 43, 129, 203), 'cty'] <- c(3,4,39,42)
# 4   f   k   r
# 100 106   4  24
mpg$drv <- ifelse(mpg$drv %in% c('4','f','r'),mpg$drv,NA)
# Q2. 상자 그림을 이용해 cty에 이상치가 있는지 확인하라.
# 상자 그림의 통계치를 이용해 정상 범위를 벗어난 값을 결측 처리한 후 다시 상자 그림을 만들어 이상치가 사라졌는지 확인하라
# boxplot(), boxplot()$stats
boxplot(mpg$cty)
boxplot(mpg$cty)$stats
mpg$cty <- ifelse(mpg$cty < 9 | mpg$cty > 26, NA, mpg$cty)
table(mpg$cty)
# Q3. 이상치를 제외한 다음 drv별로 cty 평균이 어떻게 다른지 알아보자. 하나의 dplyr 구문으로 만들어라
# filter(), is.na(), group_by(), summarise()
mpg %>%
filter(!is.na(drv) & !is.na(cty)) %>%
group_by(drv) %>%
summarise(mean_cty = mean(cty))
boxplot(mpg$cty)
# 오름차순 정렬
exam %>% arrange(math)
exam <- read.csv("csv_exam.csv")
# 오름차순 정렬
exam %>% arrange(math)
# 오름차순 정렬
exam %>% arrange(-math)
# left_join()
help("left_join")
library(ggplot2)
mpg <- as.data.frame(ggplot2::mpg)
ggplot(data = mpg, aes(x = displ, y = hwy))
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + xlim(3, 6)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
xlim(3, 6) +
ylim(10, 30)
library(dplyr)
df_mpg <- mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy))
df_mpg
ggplot(data = df_mpg, aes(x = drv, y = mean_hwy)) + geom_col()
ggplot(data = df_mpg, aes(x = reorder(drv, -mean_hwy), y = mean_hwy)) + geom_col()
ggplot(data = mpg, aes(x = drv)) + geom_bar()
ggplot(data = mpg, aes(x = hwy)) + geom_bar()
# 시계열 그래프 만들기
ggplot(data = economics, aes(x =date, y = unemploy)) + geom_line()
# 상자 그림 만들기
ggplot(data = mpg, aes(x = drv, y = hwy)) + geom_boxplot()
# 2. 패키지 설치 및 로드
install.packages("foreign")
library(foreign) # SPSS 파일 불러오기
library(dplyr) # 전처리
library(ggplot2) # 시각화
library(readxl) # 엑셀 파일 불러오기
# 3. 데이터 불러오기
raw_welfare <- read.spss(file = "./Koweps_hpc10_2015_beta1.sav",
to.data.frame = T)
getwd()
setwd("E:/Workspace/RLang24/workscripts/books/doit_data_analysis/Part03")
# 3. 데이터 불러오기
raw_welfare <- read.spss(file = "./Koweps_hpc10_2015_beta1.sav",
to.data.frame = T)
# 복사본
welfare <- raw_welfare
# 4. 데이터 검토하기
head(welfare)
tail(welfare)
View(welfare)
